[gcode_macro BEEP]
gcode:
  SET_PIN PIN=beeper VALUE=1
  G4 P10  
  SET_PIN PIN=beeper VALUE=0

[gcode_macro mainled_on]
gcode:
    SET_PIN PIN=main_led VALUE=1

[gcode_macro mainled_off]
gcode:
    SET_PIN PIN=main_led VALUE=0

#--------------------------------------------------------------------#
#--------------------------------------------------------------------#

#[gcode_shell_command FACTORY_RESETS]
#command: /home/biqu/factory_resets.sh
#timeout: 2.

[force_move]
enable_force_move: True

[gcode_macro _global_var]
variable_pause_park:{'x': 0, 'y': 0, 'z': 10, 'e': 1}
variable_cancel_park:{'x': 0, 'y': 350, 'z': 10, 'e': 1}
variable_z_maximum_lifting_distance: 345
variable_pause_resume_travel_speed: 150
variable_bed_mesh_calibrate_target_temp: 65
variable_load_filament_extruder_temp: 250
gcode:

[gcode_macro _IDLE_TIMEOUT]
gcode:
    {% if printer.print_stats.state == "paused" %}
      RESPOND TYPE=echo MSG="No operations in 10min!"
    {% else %}
     M84
     TURN_OFF_HEATERS
    {% endif %}

[gcode_macro _ALL_FAN_OFF]
gcode:
    M106 S0
    M107


[gcode_macro _CALIBRATION_ZOFFSET]
gcode:
    M117 Calibrate Offset
    QUAD_GANTRY_LEVEL
    M140 S65
    G4 P500
    CLEAN_NOZZLE
    G4 P500
    M117 Z-offset calibration
    Z_OFFSET_CALIBRATION
    Z_OFFSET_APPLY_PROBE
    M400
    G4 P3000
    SAVE_CONFIG 

[delayed_gcode _auto_zoffset]
gcode:
    SAVE_VARIABLE VARIABLE=offsetadjust VALUE={'%05.2f' % (0)}
    _CALIBRATION_ZOFFSET
    M23 /.zoffset_test.gcode
    M24

[gcode_macro _Delay_Calibrate]
gcode:
    UPDATE_DELAYED_GCODE ID=_auto_zoffset DURATION=1.0

[delayed_gcode TEST_BELT]
initial_duration: 0.3
gcode:
    {% set x_freq = printer.save_variables.variables.x_freq|float %}
    {% set y_freq = printer.save_variables.variables.y_freq|float %}
    {% set show_freq = printer.save_variables.variables.show_freq %}
    {% if show_freq == 1 %}
        M117 x {x_freq}, y {y_freq}
        SAVE_VARIABLE VARIABLE=show_freq VALUE=0
    {% endif %}

[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing:QUAD_GANTRY_LEVEL_BASE
gcode:
    {% set mesh_name = "default" %}
    {% set mesh_calibrate_temp = printer['gcode_macro _global_var'].bed_mesh_calibrate_target_temp|int %}
    {% set current_target_temp = printer.heater_bed.target|int %}

    {action_respond_info("Check Heating!")}
    # Only use the calibration temp if no temperature is currently set
    {% if current_target_temp > 0 %}
        {% set mesh_calibrate_temp = current_target_temp %}
    {% endif %}
    
    {% if printer.heater_bed.temperature != mesh_calibrate_temp %}
        M140 S{mesh_calibrate_temp}
        {action_respond_info("The bed target temperature was not reached!")}
        {action_respond_info("Bed heating...")}
        M190 S{mesh_calibrate_temp}
    {% endif %}

    {% if printer.toolhead.homed_axes|lower != "xyz" %}
        G28
    {% endif %}

    QUAD_GANTRY_LEVEL_BASE

    {% if current_target_temp == 0 %}
        M140 S0
    {% endif %}
    

[gcode_macro PROBE_CALIBRATE]
rename_existing:PROBE_CALIBRATE_BASE
gcode:
    {% set current_target_temp  = printer.heater_bed.target|int %}
    {% set z_offset_calibrate_temp = printer['gcode_macro _global_var'].bed_mesh_calibrate_target_temp|int %}

    {action_respond_info("z_offset_calibrate")}
    {% if printer.heater_bed.temperature != z_offset_calibrate_temp %}
        M140 S{z_offset_calibrate_temp}
        {action_respond_info("The bed target temperature was not reached!")}
        {action_respond_info("Bed heating...")}
        M190 S{z_offset_calibrate_temp}
    {% endif %}

    G28
    PROBE_CALIBRATE_BASE
    TESTZ z=-4


[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BED_MESH_CALIBRATE_BASE
gcode:
    
    {% set mesh_name = "default" %}
    {% set mesh_calibrate_temp = printer['gcode_macro _global_var'].bed_mesh_calibrate_target_temp|int %}
    {% set current_target_temp = printer.heater_bed.target|int %}

    {action_respond_info("Check Heating!")}
    # Only use the calibration temp if no temperature is currently set
    {% if current_target_temp > 0 %}
        {% set mesh_calibrate_temp = current_target_temp %}
    {% endif %}
    
    {% if printer.heater_bed.temperature != mesh_calibrate_temp %}
        M140 S{mesh_calibrate_temp}
        {action_respond_info("The bed target temperature was not reached!")}
        {action_respond_info("Bed heating...")}
        M190 S{mesh_calibrate_temp}
    {% endif %}

    {% if printer.toolhead.homed_axes|lower != "xyz" %}
        G28
    {% endif %}

    BED_MESH_CLEAR
    
    BED_MESH_CALIBRATE_BASE ADAPTIVE=1

    {% if current_target_temp == 0 %}
        M140 S0  
    {% endif %}

[gcode_macro G34]
gcode:
    BED_MESH_CLEAR 
    {% if printer.toolhead.homed_axes|lower != "xyz" %}
      G28
    {% else %}
      G28 Z
    {% endif %}
    QUAD_GANTRY_LEVEL 
    G28 Z 
    G0 X175 Y175 Z30 F3600

[delayed_gcode bed_mesh_init]
initial_duration: .01
gcode:
    BED_MESH_PROFILE LOAD=default

[delayed_gcode _print_start_wait]
gcode:
    {% if printer['gcode_macro START_PRINT'].state == 'Heating'%}
        {action_respond_info("Prepare->Heating!")}
    {% elif printer['gcode_macro START_PRINT'].state == 'Start' %}
        {action_respond_info("Heating->Start!")}
    {% endif %}

    {% if printer['gcode_macro START_PRINT'].execute|lower != 'false' %}
        START_PRINT
    {% endif %}

; ------------------------
; CLEAN MERGED MACRO (BEST OF CLEAN_AND_PURGE + CLEAN_NOZZLE)
; ------------------------

[gcode_macro CLEAN_NOZZLE_MERGED]
gcode:
    # Merged clean macro combining purge blob, silicone brush wipe, LED feedback, and safe motion logic
    # This macro eliminates the need for CLEAN_NOZZLE and CLEAN_AND_PURGE individually

    LCD_WHITE                      # Indicate cleaning process start
    M117 CLEAN: START

    # Load global config temps for extrusion and bed heat
    {% set extruder_temp = printer['gcode_macro _global_var'].load_filament_extruder_temp|int %}
    {% set mesh_temp = printer['gcode_macro _global_var'].bed_mesh_calibrate_target_temp|int %}

    # Conditional light bed heat if print isn't active
    {% if printer.extruder.target|int > 0 %}
        M140 S{ mesh_temp }       # Use full calibration bed temp
    {% else %}
        M140 S60                    # Minimal heat to aid with cleaning
    {% endif %}

    M104 S{ extruder_temp }       # Preheat nozzle (non-blocking)

    {% if printer.toolhead.homed_axes != "xyz" %}
        G28                         # Home if not homed
    {% endif %}

    # Move to front purge zone
    G90                             # Absolute positioning
    G1 Z6 F600                      # Lift to safe height
    G1 X1 Y30 F6000                 # Move to purge blob location (kick zone)
    M400                            # Wait for motion to complete

    # Prepare for extrusion
    M83                             # Relative extrusion
    G1 E0                           # Reset extruder
    G1 Z0.1 F600                    # Drop for purge

    LCD_ORANGE                      # Heating indicator
    M117 CLEAN: HEATING
    M109 S{ extruder_temp }       # Wait for temp

    # Extrude and kick
    M117 CLEAN: EXTRUDING
    G1 Z1.7                         # Extrude height
    G1 E39 F250                     # Purge slowly
    M106 S255                       # Full fan
    G1 Z1.4                         # Slight retract height
    G4 P100                         # Pause
    G1 X3 Y33 Z1.2 F100             # Kick the blob
    M400

    # Move to brush and perform wipe
    M117 CLEAN: WIPE
    G1 Z3.6 F600                    # Raise for brush
    G1 X318 Y360 F9000              # Start of wipe path
    G1 Z1.4 F300                    # Lower to brush

    WIPE_BRUSH_PASS

    G1 Z3.8 F300                    # Lift after wiping
    M400

    # Wrap-up
    M117 CLEAN: FINALIZE
    G1 X352 Y344 F7000              # Move away from brush
    G1 Z7 F300                      # Lift
    G4 P1000                        # Pause to cool
    M107                            # Fan off

    LCD_GREEN                       # Clean complete indicator
    M117 CLEAN COMPLETE

    G1 X1 Y1 F6000                  # Final park location
    M400


[gcode_macro WIPER_RUN]
gcode:
    # Move to brush and perform wipe
    M117 CLEAN: WIPE
    G1 Z3.6 F600                    # Raise for brush
    G1 X318 Y360 F9000              # Start of wipe path
    G1 Z1.4 F300                    # Lower to brush

    WIPE_BRUSH_PASS

    G1 Z3.8 F300                    # Lift after wiping
    M400

    # Wrap-up
    M117 CLEAN: FINALIZE
    G1 X352 Y344 F7000              # Move away from brush
    G1 Z7 F300                      # Lift
    G4 P1000                        # Pause to cool
    M107                            # Fan off

    LCD_GREEN                       # Clean complete indicator
    M117 CLEAN COMPLETE


; ------------------------
; WIPE_BRUSH_PASS - Looped Silicone Brush Zig-Zag Pattern with Repeated Coarse Passes
; ------------------------

[gcode_macro WIPE_BRUSH_PASS]
gcode:
    {% set x_start = 318 %}     # Starting X position
    {% set x_end = 353 %}       # Ending X position
    {% set y_high = 360 %}      # Frontmost wipe line (Y max)
    {% set y_low = 356 %}       # Rear wipe line
    {% set step = 2 %}          # Zigzag step in X
    {% set coarse_passes = 2 %} # Number of coarse full brush passes

    # Fine zigzag wiping
    {% for x in range(x_start, x_end, step) %}
        G1 X{x} Y{y_high} F4500
        G1 X{x} Y{y_low} F4500
    {% endfor %}

    # Coarse full brush passes
    G1 Z1.6 F300  # Slightly deeper brush depth
    {% for i in range(coarse_passes) %}
        G1 X{x_end} Y{y_low} F4000  # Full right wipe
        G1 X{x_start} Y{y_high} F4000  # Full left wipe
    {% endfor %}

; ------------------------
; PURGE_BLOB_KICK_ONLY - Isolated macro for blob purge and kick without homing or wipe
; ------------------------

[gcode_macro PURGE_BLOB_KICK_ONLY]
gcode:
    {% set extruder_temp = printer['gcode_macro _global_var'].load_filament_extruder_temp|int %}
    {% set purge_position = {'x': 5, 'y': 30} %}

    LCD_WHITE
    M117 PURGE TEST

    G90
    G1 Z6 F600                        # Lift Z
    G1 X{purge_position.x} Y{purge_position.y} F6000
    M400

    M83
    G1 E0
    G1 Z1.4 F600                      # Raise for clean drop

    LCD_ORANGE
    M117 HEATING...
    M109 S{extruder_temp}

    M117 PURGING
    G1 E10 F150
    G1 X{purge_position.x + 0.3} F500
    G1 X{purge_position.x - 0.3} F500
    G1 E25 F150
    M106 S255
    G1 Z1.2
    G4 P150
    G1 Y{purge_position.y + 8} F3000  # Kick in Y
    G1 Y{purge_position.y} F3000
    G1 Z6 F600
    M107
    G4 P3000
    M400

    LCD_GREEN
    M117 PURGE COMPLETE



[gcode_macro START_PRINT]
description: Start the print with the correct temperature
variable_state: 'Prepare'
variable_record_extruder_temp: 0
variable_max_record_extruder_temp: 0
gcode:
    {% set extruder_target_temp = printer.extruder.target|int %}
    {% set bed_target_temp = printer.heater_bed.target|int %}

    # Set default temperatures if none are provided by the slicer
    {% if extruder_target_temp == 0 %}
        {% set extruder_target_temp = 215 %}  # Default PLA temperature
    {% endif %}
    {% if bed_target_temp == 0 %}
        {% set bed_target_temp = 65 %}  # Default PLA bed temperature
    {% endif %}

    {action_respond_info("Starting print - Extruder target: %d, current: %.1f - Bed target: %d, current: %.1f" % (extruder_target_temp, printer.extruder.temperature, bed_target_temp, printer.heater_bed.temperature))}

    M400
    CLEAR_PAUSE
    G90

    {% if printer.toolhead.homed_axes|lower != "xyz" %}
        G28
    {% endif %}

    {% if printer['filament_switch_sensor filament_sensor'].enable == True and
          printer['filament_switch_sensor filament_sensor'].filament_detected != True
    %}
        M117 No filament!!!
        {action_respond_info("Please Insert filament in Sensor!")}
        CANCEL_PRINT
    {% endif %}

    {action_respond_info("Check Heating!")}

    M140 S{bed_target_temp}
    M104 S{extruder_target_temp}

    {% if printer.heater_bed.temperature < bed_target_temp %}
        M117 Bed heating...
        {action_respond_info("Bed heating - Target: %d, Current: %.1f" % (bed_target_temp, printer.heater_bed.temperature))}
        M190 S{bed_target_temp}
    {% endif %}

    {action_respond_info("Before M109 - Extruder target: %d, current: %.1f - Bed target: %d, current: %.1f" % (extruder_target_temp, printer.extruder.temperature, bed_target_temp, printer.heater_bed.temperature))}

    {% if printer.extruder.temperature < extruder_target_temp %}
        M117 Nozzle heating...
        {action_respond_info("Nozzle heating...")}
        M109 S{extruder_target_temp} 
    {% endif %}

    {action_respond_info("After M109 - Extruder target: %d, current: %.1f - Bed target: %d, current: %.1f" % (extruder_target_temp, printer.extruder.temperature, bed_target_temp, printer.heater_bed.temperature))}

    {% if printer.quad_gantry_level.applied|lower != 'true' %}
        QUAD_GANTRY_LEVEL
    {% endif %}
    
    BED_MESH_CALIBRATE ADAPTIVE=1 
    
    WIPER_RUN
        
    {action_respond_info("Before print start - Extruder target: %d, current: %.1f - Bed target: %d, current: %.1f" % (extruder_target_temp, printer.extruder.temperature, bed_target_temp, printer.heater_bed.temperature))}
    
    M117 Printing now!!!
    {action_respond_info("Start!")}

    

[gcode_macro END_PRINT]
description: 
variable_state: 'normal'
gcode:
    {% set z_max = printer['gcode_macro _global_var'].z_maximum_lifting_distance|int %}
    {% set e_mintemp  = printer.configfile.settings['extruder'].min_extrude_temp %}

    M400
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=state VALUE='"Prepare"'
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=record_extruder_temp VALUE=0  
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=max_record_extruder_temp VALUE=0

    M117 Finish Print!!!
    G91
    {% if printer['filament_switch_sensor filament_sensor'].enable == True and
          printer['filament_switch_sensor filament_sensor'].filament_detected == True
    %}
        {% if (printer.extruder.target != 0 and printer.extruder.temperature >= printer.extruder.target) or
              printer.extruder.temperature >= e_mintemp
        %}
            G1 E-2 F2700
            G1 E-2 Z0.2 F2400
        {% endif %}
    {% endif %}

    {% if (printer.gcode_move.position.z + 10) < z_max %}
        G1 Z+10 F3000
    {% else %}
        G1 Z+{(z_max - printer.gcode_move.position.z)} F3000
    {% endif %}
    G90
    G1 X0 Y360 F9000

    _ALL_FAN_OFF
    TURN_OFF_HEATERS

    M84 X Y Z E  

    M220 S100
    M221 S100

    CLEAR_PAUSE

    {action_respond_info("Finish Print!")}


[gcode_macro CANCEL_PRINT]
description: 
rename_existing: CANCEL_PRINT_BASE
gcode:
    {% set x_park = printer['gcode_macro _global_var'].cancel_park.x|float %}
    {% set y_park = printer['gcode_macro _global_var'].cancel_park.y|float %}
    {% set z_park = printer['gcode_macro _global_var'].cancel_park.z|float %}
    {% set z_lift_max = printer['gcode_macro _global_var'].z_maximum_lifting_distance %}
    {% set e_restract = printer['gcode_macro _global_var'].cancel_park.e|float %}
    {% set e_mintemp  = printer.configfile.settings['extruder'].min_extrude_temp %}

    CANCEL_PRINT_BASE

    M117 Cancel Print!!!
    G91
    {% if printer['filament_switch_sensor filament_sensor'].enabled == True and 
          printer['filament_switch_sensor filament_sensor'].filament_detected == True
    %}
        {% if (printer.extruder.target != 0 and printer.extruder.temperature >= printer.extruder.target) or
              printer.extruder.temperature >= e_mintemp
        %}
            G1 E-{e_restract} F500
        {% else %}
            {action_respond_info("Nozzle not hot enough")}
        {% endif %}
    {% endif %}

    {%if (printer.gcode_move.position.z + 10) < z_lift_max %}
        G1 Z+10 F3000
    {% else %}
        G1 Z+{(z_lift_max - printer.gcode_move.position.z)} F3000
    {% endif %}
        G90
        G1 X{x_park} Y{y_park} F9000

    TURN_OFF_HEATERS
    _ALL_FAN_OFF

    CLEAR_PAUSE
    M84 X Y Z E

    M117 Ready
    {action_respond_info("Cancel Print Success!")}
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=state VALUE='"Prepare"'
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=record_extruder_temp VALUE=0  
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=max_record_extruder_temp VALUE=0


[gcode_macro PAUSE]
rename_existing: PAUSE_BASE
variable_state: 'normal'
gcode:
    {% if printer.pause_resume.is_paused == False %}
        {% set x_park = printer['gcode_macro _global_var'].pause_park.x|float %}
        {% set y_park = printer['gcode_macro _global_var'].pause_park.y|float %}
        {% set e_restract = printer['gcode_macro _global_var'].pause_park.e|float %}
        {% set z_lift_max = printer['gcode_macro _global_var'].z_maximum_lifting_distance %}

        {% set state = params.STATE if 'filament_change' in params.STATE else 'normal' %}
        
        {action_respond_info("Pause Print!")}
        
        PAUSE_BASE
        M117 Pause Print!!!
        G91
        {% if (printer.gcode_move.position.z + 5) < z_lift_max %}
            G1 Z+5 F3000
        {% else %}
            G1 Z+{(z_lift_max - printer.gcode_move.position.z)} F3000
        {% endif %}
        G90
        {% if printer.gcode_move.position.x != x_park and
                printer.gcode_move.position.y != y_park     
        %}
            G1 X{x_park} Y{y_park} F{printer["gcode_macro _global_var"].pause_resume_travel_speed * 60}
        {% endif %}

        M104 S{printer.extruder.target}
    
        {% if state == 'normal' %}
            {% if (printer.extruder.temperature + 5 >= printer.extruder.target) and (printer.extruder.temperature >= printer.configfile.settings['extruder'].min_extrude_temp) %}
                {% if printer['filament_switch_sensor filament_sensor'].enabled == True and 
                    printer['filament_switch_sensor filament_sensor'].filament_detected == True
                %}
                    G91
                    G1 E-{e_restract} F300
                    G90
                {% elif printer['filament_switch_sensor filament_sensor'].enabled == True and 
                        printer['filament_switch_sensor filament_sensor'].filament_detected != True %}
                    G91
                    G1 E+95 F300
                    G1 E-10 F1500
                    G1 E-20 F600
                    M400
                    G4 P3000
                    G1 E-50 F300 
                    G90
                {% endif %}
            {% endif %}
        {% elif state == 'filament_change' %}
            {% if (printer.extruder.temperature + 5 >= printer.extruder.target) and (printer.extruder.temperature >= printer.configfile.settings['extruder'].min_extrude_temp) %}
                G91
                G1 E+25 F300
                G1 E-10 F1500
                G1 E-20 F600
                M400
                G4 P3000
                G1 E-50 F300 
                G90
            {% endif %}
        {% endif %}
    {% endif %}


[delayed_gcode _resume_wait]
gcode:
    {% if printer['gcode_macro RESUME'].execute|lower != 'false' %}
        RESUME
    {% endif %}


[gcode_macro RESUME]
description: Pause the actual running print
rename_existing: RESUME_BASE
variable_state: 'normal'
gcode:
    {% set e_restract = printer['gcode_macro _global_var'].pause_park.e|float %}
    {% set extruder_target_temp = printer.extruder.target|int %}

    {% set state = params.STATE if 'filament_change' in params.STATE else 'normal' %}

    {% if state == 'filament_change' %}
        {% if printer["filament_switch_sensor filament_sensor"].enable == True and
              printer["filament_switch_sensor filament_sensor"].filament_detected != True
        %}
            {action_respond_info("Please Insert filament in Sensor!")}
        {% else %}
            {% if printer.extruder.temperature + 5 >= printer.extruder.target %}
                G91
                G1 E30 F300
                G1 E10 F150
                G90
            {% else %}
                M140 S{extruder_target_temp}
                {action_respond_info("Nozzle not hot enough!")}
                {action_respond_info("Nozzle heating...")}
                M190 S{extruder_target_temp}
                G91
                G1 E30 F300
                G1 E10 F150
                G90
            {% endif %}
            {action_respond_info("Print resumming!")}
            RESUME_BASE
        {% endif %}
    {% elif state == 'normal' %}
        {% if printer['filament_switch_sensor filament_sensor'].enable != True and
              printer['filament_switch_sensor filament_sensor'].filament_detected != True
        %}
            {action_respond_info("Please Insert filament in Sensor!")}
        {% else %}
            {action_respond_info("Print resumming!")}
            G91
            G1 E{e_restract} F300
            G90
            M117 Printing now!!!
            RESUME_BASE
        {% endif %}
    {% endif %}


[gcode_macro LOAD_FILAMENT]
gcode:
    {% set extruder_temp = printer['gcode_macro _global_var'].load_filament_extruder_temp|int %}
    {% set current_target_temp  = printer.extruder.target|int %}

    {% if printer.print_stats.state != "printing" %}
        {% if printer.print_stats.state != "paused" %}
            M104 S{extruder_temp}
            M117 Nozzle heating...
            {action_respond_info("Nozzle not hot enough!")}
            {action_respond_info("Nozzle heating...")}
            M109 S{extruder_temp}
        {% else %}
            {% if printer.extruder.target == 0 %}
                M104 S{extruder_temp}
                M117 Nozzle heating...
                {action_respond_info("Nozzle not hot enough!")}
                {action_respond_info("Nozzle heating...")}
                M109 S{extruder_temp}
            {% else %}
                M104 S{printer.extruder.target}
                M117 Nozzle heating...
                {action_respond_info("Nozzle not hot enough!")}
                {action_respond_info("Nozzle heating...")}
                M109 S{printer.extruder.target}
            {% endif %}
        {% endif %}
        M117 Extruding...
        G91 
        G1 E45 F300
        G1 E30 F150
        G90
        M400
        M117 Extrude Finish
        M400
        {% if current_target_temp == 0 or printer.print_stats.state != "paused"%}
            M104 S0
        {% endif %}
    {% else %}
        {action_respond_info("Don't load filament during printing!!!")}
    {% endif %}

    
[gcode_macro UNLOAD_FILAMENT]
gcode:
    {% set extruder_temp = printer['gcode_macro _global_var'].load_filament_extruder_temp|int %}
    {% set current_target_temp  = printer.extruder.target|int %}

    {% if printer.print_stats.state != "printing" %}
        {% if printer.print_stats.state != "paused" %}
            M104 S{extruder_temp}
            M117 Nozzle heating...
            {action_respond_info("Nozzle not hot enough!")}
            {action_respond_info("Nozzle heating...")}
            M109 S{extruder_temp}
        {% else %}
            {% if printer.extruder.target == 0 %}
                M104 S{extruder_temp}
                M117 Nozzle heating...
                {action_respond_info("Nozzle not hot enough!")}
                {action_respond_info("Nozzle heating...")}
                M109 S{extruder_temp}
            {% else %}
                M104 S{printer.extruder.target}
                M117 Nozzle heating...
                {action_respond_info("Nozzle not hot enough!")}
                {action_respond_info("Nozzle heating...")}
                M109 S{printer.extruder.target}
            {% endif %}
        {% endif %}
        M117 Retracting...
        G91
        G1 E+25 F300
        G1 E-10 F1500
        G1 E-20 F600
        M400
        G4 P3000
        G1 E-50 F300 
        G90
        M400
        M117 Retract Finish
        M400
        {% if current_target_temp == 0 or printer.print_stats.state != "paused"%}
            M104 S0
        {% endif %}
    {% else %}
        {action_respond_info("Don't unload filament during printing!!!")}
    {% endif %}

[gcode_macro M109]
rename_existing: M99109
gcode:    
    {% set s = params.S|float %}    
    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s-1} MAXIMUM={s+1}   
    {% endif %}
    
[gcode_macro M190]

rename_existing: M99190
gcode:    
    {% set s = params.S|float %}
    M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}   
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s-1} MAXIMUM={s+1}  
    {% endif %}

[gcode_macro M106]
gcode:
    {% set fan = 'fan' + (params.P|int if params.P is defined else 0)|string %}
    {% set speed = (params.S|float / 255 if params.S is defined else 1.0) %}
    {% if fan == 'fan3'%}
            SET_FAN_SPEED FAN={fan} SPEED={speed}
    {% else %}
        SET_FAN_SPEED FAN={'fan0'} SPEED={speed}
        SET_FAN_SPEED FAN={'fan1'} SPEED={speed}
    {% endif %}
    
[gcode_macro M107]
gcode:
    {% set fan = 'fan' + (params.P|int if params.P is defined else 0)|string %}
    {% if fan == 'fan3'%}
            SET_FAN_SPEED FAN={fan} SPEED=0
    {% else %}
        SET_FAN_SPEED FAN={'fan0'} SPEED=0
        SET_FAN_SPEED FAN={'fan1'} SPEED=0
    {% endif %}
    
[gcode_macro M600]
gcode:
    PAUSE STATE=filament_change

#-----------MOD START - LED MACROS TO SET LCD COLORS------------------#

[gcode_macro LCD_DEFAULT]
gcode:
    SET_LED LED=Screen_Colour RED=0.5 GREEN=0.4 BLUE=0.7 INDEX=1 TRANSMIT=0
    SET_LED LED=Screen_Colour RED=0.5 GREEN=0.4 BLUE=0.7 INDEX=2 TRANSMIT=0
    SET_LED LED=Screen_Colour RED=0.5 GREEN=0.4 BLUE=0.7 INDEX=3

[gcode_macro LCD_RED]
gcode:
    SET_LED LED=Screen_Colour RED=1 GREEN=0 BLUE=0 TRANSMIT=1

[gcode_macro LCD_ORANGE]
gcode:
    SET_LED LED=Screen_Colour RED=1 GREEN=0.1 BLUE=0 TRANSMIT=1

[gcode_macro LCD_GREEN]
gcode:
    SET_LED LED=Screen_Colour RED=0 GREEN=1 BLUE=0 TRANSMIT=1

[gcode_macro LCD_BLUE]
gcode:
    SET_LED LED=Screen_Colour RED=0 GREEN=0 BLUE=1 TRANSMIT=1

[gcode_macro LCD_PURPLE]
gcode:
    SET_LED LED=Screen_Colour RED=1 GREEN=0 BLUE=1 TRANSMIT=1

[gcode_macro LCD_CYAN]
gcode:
    SET_LED LED=Screen_Colour RED=0 GREEN=1 BLUE=1 TRANSMIT=1

[gcode_macro LCD_YELLOW]
gcode:
    SET_LED LED=Screen_Colour RED=1 GREEN=0.9 BLUE=0.05 TRANSMIT=1

[gcode_macro LCD_BLACK]
gcode:
    SET_LED LED=Screen_Colour RED=0 GREEN=0 BLUE=0 TRANSMIT=1

[gcode_macro LCD_WHITE]
gcode:
    SET_LED LED=Screen_Colour RED=1 GREEN=1 BLUE=0.80 TRANSMIT=1
#-----------MOD END - LED MACROS TO SET LCD COLORS------------------#
